/*
    Copyright (c) 2019-2023 Brett g Porter

    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    SOFTWARE.
*/

#pragma once

#include "animatedValue.h"

namespace friz
{

/**
 * @class Parametric
 *
 * @brief A class that can generate different parametric easing curves.
 *
 *        We use formulas that are available (and demonstrated!) on
 *        https://easings.net
 */
class Parametric : public TimedValue
{
public:
    // All the curves are generated by a function that accepts a float
    // between 0..1 (percentage of the curve completion) and returns a
    // float that's typically between 0..1 (curve position) but may overshoot
    // that 0..1 range.
    using CurveFn = std::function<float (float)>;

    enum CurveType
    {
        kLinear = 0,
        kEaseInSine,
        kEaseOutSine,
        kEaseInOutSine,
        kEaseInQuad,
        kEaseOutQuad,
        kEaseInOutQuad,
        kEaseInCubic,
        kEaseOutCubic,
        kEaseInOutCubic,
        kEaseInQuartic,
        kEaseOutQuartic,
        kEaseInOutQuartic,
        kEaseInQuintic,
        kEaseOutQuintic,
        kEaseInOutQuintic,
        kEaseInExpo,
        kEaseOutExpo,
        kEaseInOutExpo,
        kEaseInCirc,
        kEaseOutCirc,
        kEaseInOutCirc,
        kEaseInBack,
        kEaseOutBack,
        kEaseInOutBack,
        kEaseInElastic,
        kEaseOutElastic,
        kEaseInOutElastic,
        kEaseInBounce,
        kEaseOutBounce,
        kEaseInOutBounce
    };

    /**
     * @brief Construct a new Parametric object
     *
     * @param type Type of curve to use.
     * @param startVal
     * @param endVal
     * @param duration # of frames.
     */
    Parametric (CurveType type, float startVal, float endVal, int duration);

    /**
     * @brief Set a new curve function for the generator.
     *
     * @param curve
     */
    void SetCurve (CurveFn curve);

private:
    float generateNextValue (float progress) override;

private:
    CurveFn curve;
};

} // namespace friz